// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetCoreArchTemplate.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250730122248_ReUpTheDatabase")]
    partial class ReUpTheDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this Day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this meal");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc3cf2d9-46ba-40ec-9924-27a6163dbcb4"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("d50f2062-3084-4781-a342-279b4f86b84a"),
                            Calories = 89,
                            IsDeleted = false,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("43a43245-39ed-4d13-85d7-889c3c88b8e7"),
                            Calories = 41,
                            IsDeleted = false,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("5e466802-5417-4776-9618-885ce9e160ea"),
                            Calories = 34,
                            IsDeleted = false,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("3bb08e87-9b82-49a9-8591-bbc9708e76ff"),
                            Calories = 165,
                            IsDeleted = false,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("8f2f9579-b632-4f75-8445-8820c5507a58"),
                            Calories = 208,
                            IsDeleted = false,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("df6e2514-e582-4efb-9616-da1289ec6698"),
                            Calories = 155,
                            IsDeleted = false,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("c1940210-c518-402f-86b1-4de018ece160"),
                            Calories = 579,
                            IsDeleted = false,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("dee96341-eddf-41f4-bf1e-549d2ca08cc9"),
                            Calories = 123,
                            IsDeleted = false,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("2091a2a4-e140-4bcd-8c93-022e91e55194"),
                            Calories = 389,
                            IsDeleted = false,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("7c2ededf-71cc-463b-b471-4023723088b6"),
                            Calories = 61,
                            IsDeleted = false,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("12b257ac-b674-44fb-98c8-f3ffd7035472"),
                            Calories = 59,
                            IsDeleted = false,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("39527506-2aa7-4c73-b47a-0772142159f2"),
                            Calories = 403,
                            IsDeleted = false,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("e63c0ec5-5ccf-4c16-9122-2db8b4a589fa"),
                            Calories = 23,
                            IsDeleted = false,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("99ed53c1-e922-4d64-8eb4-77962396e714"),
                            Calories = 18,
                            IsDeleted = false,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("9e27b1d0-6732-4361-9e3b-999711fb466f"),
                            Calories = 77,
                            IsDeleted = false,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("75f1beb1-6d34-44b2-a476-7f2f3057f4c6"),
                            Calories = 86,
                            IsDeleted = false,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("9fde323d-bf99-4b22-88b9-02d46a624cc0"),
                            Calories = 250,
                            IsDeleted = false,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("b0ca5ab7-36ba-4424-938d-783323814246"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("4f02eee3-45a8-4dcf-baf9-c3c5b87a51e3"),
                            Calories = 99,
                            IsDeleted = false,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("0615f20c-ddba-457d-bf2b-fa52d311667b"),
                            Calories = 76,
                            IsDeleted = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("0545f597-eb87-4b17-b118-97d9133dfb4b"),
                            Calories = 116,
                            IsDeleted = false,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("0853b3df-7cb8-4e25-8182-652918e76ad1"),
                            Calories = 164,
                            IsDeleted = false,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("1d0667b1-a2c6-4d34-9ce5-075620227fc0"),
                            Calories = 127,
                            IsDeleted = false,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("256690e2-954e-46f7-a4ed-92c60191028b"),
                            Calories = 16,
                            IsDeleted = false,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("55b48c06-4df3-48f5-98fb-2bb12b5bad69"),
                            Calories = 15,
                            IsDeleted = false,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("8ebb9f20-4591-43da-93e0-b5e0638d8069"),
                            Calories = 17,
                            IsDeleted = false,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("b1ed6b6c-94ed-4f77-8084-d36796cc3b97"),
                            Calories = 22,
                            IsDeleted = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("4d925c37-d4fb-4c21-8f23-db2770d0be5e"),
                            Calories = 160,
                            IsDeleted = false,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("b6ff8d40-4e4c-4e1e-bf2c-0ad91625a00a"),
                            Calories = 50,
                            IsDeleted = false,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("3478308d-ffde-4b6a-8286-deb74f75c334"),
                            Calories = 47,
                            IsDeleted = false,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("c57469f7-6c10-4a6d-835a-f23f2a497c21"),
                            Calories = 57,
                            IsDeleted = false,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("5ec8d2bd-d550-4668-b80e-60e177b9a163"),
                            Calories = 32,
                            IsDeleted = false,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("19dded99-5f40-4e3b-b52a-3925928cf3fc"),
                            Calories = 30,
                            IsDeleted = false,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("18cd10d8-bf62-45ac-bb6b-074db7276318"),
                            Calories = 588,
                            IsDeleted = false,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("e1501b52-9693-4947-bce0-5b1627e3fb8f"),
                            Calories = 98,
                            IsDeleted = false,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("bc481a33-0456-4f65-927f-18d248f6bd07"),
                            Calories = 120,
                            IsDeleted = false,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("1d928587-7cdb-43f2-8466-87cff75d53d5"),
                            Calories = 354,
                            IsDeleted = false,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("541dcf1f-a5e0-47eb-97a9-c2ed82de7a92"),
                            Calories = 26,
                            IsDeleted = false,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("0ef96906-6be9-4984-a7df-2e9cf0d4a89e"),
                            Calories = 81,
                            IsDeleted = false,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("b9a1cd12-ad56-4183-9aa0-dc6bc0937c5a"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("8f7135c8-c9f8-44fa-aa3c-ca6d379a503c"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("de83e769-3e7d-444d-a958-c6b7732f76c0"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("c2b7e970-8f86-47c7-9b25-e7c4341b7586"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("f7438b29-f12b-4182-90fd-ee8cd12e9f71"),
                            Calories = 230,
                            IsDeleted = false,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("f7a201bf-1340-4709-bd2e-b9de7381b2fb"),
                            Calories = 277,
                            IsDeleted = false,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("88f6a168-3e81-411a-b552-c7f71d260166"),
                            Calories = 304,
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("3499e8cb-44b1-4aef-861a-26ff3f13018f"),
                            Calories = 1,
                            IsDeleted = false,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("84cf49e4-9caf-4548-98f5-f2b623e38760"),
                            Calories = 598,
                            IsDeleted = false,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if item is Soft Delited");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int?>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Times Product is used in Recepie");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Days")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Meals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany("Products")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
