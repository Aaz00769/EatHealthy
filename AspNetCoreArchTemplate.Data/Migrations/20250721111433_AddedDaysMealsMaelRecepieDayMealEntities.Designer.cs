// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatHealthy.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250721111433_AddedDaysMealsMaelRecepieDayMealEntities")]
    partial class AddedDaysMealsMaelRecepieDayMealEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User that owns this day plan");

                    b.HasKey("Id");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.Property<DateTime?>("TimeEaten")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when the meal was consumed (optional)");

                    b.HasKey("Id");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e592c5aa-c86b-4c7e-b4e2-82c1e435d77c"),
                            Calories = 52,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("e812aa69-db1b-4ec0-bc26-bb90e8e15a10"),
                            Calories = 89,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("931d3e44-eded-4d6e-aa45-f9a19f9f5791"),
                            Calories = 41,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("3f02b255-507e-4116-9a1f-f31b30098dff"),
                            Calories = 34,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("0846f7e3-6792-4e27-8740-6ea648c6925d"),
                            Calories = 165,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("6a86d27c-fe00-4880-9e1a-cc45259fdce9"),
                            Calories = 208,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("809ccc61-074a-4ba3-9fe1-5db851139aa6"),
                            Calories = 155,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("06a63d77-40c4-4308-aa77-2b4d6d0e56bb"),
                            Calories = 579,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("e4a6bbd6-8dc4-436e-bd58-f66401e0df6b"),
                            Calories = 123,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("b6170050-c320-4d81-943f-44f15da54bf8"),
                            Calories = 389,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("631084c9-b094-4113-877e-c5af109c6d05"),
                            Calories = 61,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("5febab6d-65d7-4f38-b040-be0ff0669123"),
                            Calories = 59,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("ec2b28e1-a25f-420b-b346-79d2b7c42151"),
                            Calories = 403,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("078c0a09-c55d-4f09-b873-b744a9822e71"),
                            Calories = 23,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("9c7b6c03-c526-45da-ba2e-e61f9745fa69"),
                            Calories = 18,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("c124759d-f15c-4a04-8d8f-4cf2efb1da6b"),
                            Calories = 77,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("45d7eecd-df59-4a68-ba84-892a0db03942"),
                            Calories = 86,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("44dd24c2-5d86-46e4-ad39-7aa7282d27d8"),
                            Calories = 250,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("fd3e2920-52a8-4c51-a1db-66a4ac3d6f58"),
                            Calories = 132,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("dea53950-6701-41f8-86c6-19265ab09842"),
                            Calories = 99,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("91d15418-59e6-4a2f-b22a-fa0757585dcd"),
                            Calories = 76,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("e558dade-15d2-4ce1-8b48-b0d09a19ce45"),
                            Calories = 116,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("4ed0d4f4-b4cb-4c32-af2f-d45e8270868a"),
                            Calories = 164,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("d9604923-53bf-4acc-ba0d-04c95985d30d"),
                            Calories = 127,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("843f1bfd-3719-47ff-8c54-f27c93970494"),
                            Calories = 16,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("0974e77f-45a7-4b2d-9173-7ead8c50c1ef"),
                            Calories = 15,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("f8a14030-bed8-4832-803a-a2484e3a56b2"),
                            Calories = 17,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("27b29691-edcb-4587-b059-1082257ee610"),
                            Calories = 22,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("6067d5f0-f0d2-4b9a-a593-a8ca49c0386f"),
                            Calories = 160,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("60fcd2a5-2412-41a4-8c93-e4e0089c75e2"),
                            Calories = 50,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("1dad7709-63e8-4cff-8f19-3cc32cd46f8d"),
                            Calories = 47,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("fccea5de-af09-4532-b4ae-cd6f153f172c"),
                            Calories = 57,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("e1025eeb-8390-4aa4-bcfc-c0f861ee1e59"),
                            Calories = 32,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("3c9f8d2f-5cf9-4922-a922-5ba0f6cc3553"),
                            Calories = 30,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("b0b3b202-8b78-4791-a670-d6ab65b596c1"),
                            Calories = 588,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("11ce47d7-6246-45a2-995d-ece1cef34caf"),
                            Calories = 98,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("84172e65-3a94-4314-bc37-4395980327e9"),
                            Calories = 120,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("26a36087-13a2-44e8-a21b-cb97a9da176c"),
                            Calories = 354,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("edf00317-d8f0-45fd-826b-762606f16cbe"),
                            Calories = 26,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("f29bab79-7cc9-4b02-ad1f-cd190cc33afc"),
                            Calories = 81,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("8acedea7-6cc6-44c5-9133-838f0064ea98"),
                            Calories = 25,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("8b86f534-d581-49ec-872a-2b57996d1324"),
                            Calories = 25,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("e9c8cc11-1bcb-46ec-b0da-bcfb4a52f26b"),
                            Calories = 52,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("12c3863c-d59f-4975-b767-c50e56a6250b"),
                            Calories = 132,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("cc063943-a037-4d3a-83b5-2b7837a34ea5"),
                            Calories = 230,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("25ac8eef-3a1a-4832-8b79-5d83112b44c0"),
                            Calories = 277,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("4c863fb2-e261-43c4-a86d-fd99419c2629"),
                            Calories = 304,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("093a0509-33f3-42e7-b212-8e5bde154696"),
                            Calories = 1,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("97a65322-8c2c-40d0-97cc-3cad559ad63c"),
                            Calories = 598,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
