// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetCoreArchTemplate.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250725091414_GramsCanBeNullable")]
    partial class GramsCanBeNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this Day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this meal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.Property<DateTime?>("TimeEaten")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when the meal was consumed (optional)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("21746ad4-04ed-43f0-ac91-e646626b4e23"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("adc53467-ab85-4b7b-afa2-05c03eba8d45"),
                            Calories = 89,
                            IsDeleted = false,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("6cf2f775-a5b4-4b97-81ac-0d3b28caeac0"),
                            Calories = 41,
                            IsDeleted = false,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("949c1f71-977b-4f42-b87f-51d4fc0d510a"),
                            Calories = 34,
                            IsDeleted = false,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("8d847c9e-0adb-4408-9ef8-8c161bc3d7f6"),
                            Calories = 165,
                            IsDeleted = false,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("da6e609b-8da8-4b8c-9f92-0f197e9488da"),
                            Calories = 208,
                            IsDeleted = false,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("ea064a9d-3d95-4ea6-b2cd-5a405096b8b3"),
                            Calories = 155,
                            IsDeleted = false,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("f59a2a69-0c9d-4eb4-9698-ed5170cc1a51"),
                            Calories = 579,
                            IsDeleted = false,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("eb9ef6c4-070f-4668-865a-62f9163e4268"),
                            Calories = 123,
                            IsDeleted = false,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("a6cef87c-f87f-42be-a657-dc9dfdd154bb"),
                            Calories = 389,
                            IsDeleted = false,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("617d02e7-8ede-41ee-a8e6-7df9009704ce"),
                            Calories = 61,
                            IsDeleted = false,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("4c329b11-4d11-46a4-a106-78b4700c514d"),
                            Calories = 59,
                            IsDeleted = false,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("ff161587-5f9d-47f6-94e8-ecf0fdd0320f"),
                            Calories = 403,
                            IsDeleted = false,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("166d26cc-05ff-4367-baf4-e01d371efac9"),
                            Calories = 23,
                            IsDeleted = false,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("199928b6-1b26-44c8-8c35-15628b0b3be0"),
                            Calories = 18,
                            IsDeleted = false,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("bdf7d55f-679d-4427-a0eb-3de08cde0e14"),
                            Calories = 77,
                            IsDeleted = false,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("db0aa2fd-56ac-495c-9bed-d5d67a6c55db"),
                            Calories = 86,
                            IsDeleted = false,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("58034e37-c15c-4eee-838b-a33790bd7fa3"),
                            Calories = 250,
                            IsDeleted = false,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("4d27a1a3-7e25-4d08-958e-e6686e7f2b89"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("ae367328-a353-4204-96f0-481a8441ec91"),
                            Calories = 99,
                            IsDeleted = false,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("bd23fe12-50fa-4280-b674-6f17e78fe66a"),
                            Calories = 76,
                            IsDeleted = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("f4d992a8-e0b7-497b-9a90-6b6b40a4037c"),
                            Calories = 116,
                            IsDeleted = false,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("2bd31fe5-9e83-49d7-990e-152e767c0e8e"),
                            Calories = 164,
                            IsDeleted = false,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("9f71a0a1-d2a3-42b0-aa23-c48d8654f2cf"),
                            Calories = 127,
                            IsDeleted = false,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("19408b9d-f5a1-42a7-96ea-149c900a2da1"),
                            Calories = 16,
                            IsDeleted = false,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("0262cf4e-6fcc-4d6e-93e3-994d3d47d3f7"),
                            Calories = 15,
                            IsDeleted = false,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("4e8734dc-86a9-4bac-a6aa-7b62cf75d3fc"),
                            Calories = 17,
                            IsDeleted = false,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("2e6741f5-e871-4d9c-ab3d-bcb55bd056c6"),
                            Calories = 22,
                            IsDeleted = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("9c297886-48bd-4e3d-bba5-90bcd8a73c52"),
                            Calories = 160,
                            IsDeleted = false,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("43833214-089a-401b-89c3-13f1e8c03fad"),
                            Calories = 50,
                            IsDeleted = false,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("f986d503-360e-4c9a-83ba-38c370590d05"),
                            Calories = 47,
                            IsDeleted = false,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("5f535b5a-4fda-45b4-b803-f5d1a29b1af5"),
                            Calories = 57,
                            IsDeleted = false,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("ea6aacea-c3e9-4d43-9a87-c620ad0b08eb"),
                            Calories = 32,
                            IsDeleted = false,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("c88c61a8-a91f-4338-838d-e3ff7bc43f05"),
                            Calories = 30,
                            IsDeleted = false,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("cc5aa096-2d73-42f8-97bc-bf28cd22f493"),
                            Calories = 588,
                            IsDeleted = false,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("57e636b1-f24c-4530-984a-38835dac9d30"),
                            Calories = 98,
                            IsDeleted = false,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("5c09fc5c-8313-4c7b-907d-3cc5b93c507a"),
                            Calories = 120,
                            IsDeleted = false,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("3c5b0a6c-ad6c-4cfc-a82b-790c67240ae8"),
                            Calories = 354,
                            IsDeleted = false,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("fba056ce-806f-4626-9fbf-11e668f0d5b4"),
                            Calories = 26,
                            IsDeleted = false,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("41f4cf1f-0ed9-4fed-9afb-e7210daaae99"),
                            Calories = 81,
                            IsDeleted = false,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("c04e5413-8326-4f6e-9cf2-01a8913947fa"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("f433bd5c-7d06-4b00-8a4f-ddf9722b5b94"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("c0e2e939-8634-4c26-801f-c543dffbc05f"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("26248198-fd93-4e85-87c5-c3134dedd12e"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("a0a29963-943e-409b-bdfd-b8534230465e"),
                            Calories = 230,
                            IsDeleted = false,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("6f21dad6-fd8d-4bdc-b481-5207b1898409"),
                            Calories = 277,
                            IsDeleted = false,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("d46a8193-9b74-4728-9db0-ec71d2ffd8f6"),
                            Calories = 304,
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("8439caef-8f4b-4466-a25e-ee1eb2a2b887"),
                            Calories = 1,
                            IsDeleted = false,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("8f8a0f67-e86f-460d-aa88-b0aac3a90c34"),
                            Calories = 598,
                            IsDeleted = false,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if item is Soft Delited");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int?>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Times Product is used in Recepie");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Days")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Meals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany("Products")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
