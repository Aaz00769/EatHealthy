// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatHealthy.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250722075006_AddedColums")]
    partial class AddedColums
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User that owns this day plan");

                    b.HasKey("Id");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.Property<DateTime?>("TimeEaten")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when the meal was consumed (optional)");

                    b.HasKey("Id");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b538df2-c13e-479d-b219-e5984685bb75"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("47aa570e-bddf-4cf4-bdfc-2a2feb15757b"),
                            Calories = 89,
                            IsDeleted = false,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("2dabe2a8-6e03-4a5c-ae9e-d960cc4815b0"),
                            Calories = 41,
                            IsDeleted = false,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("23cc151d-2b36-448c-a31c-f9bc5b04c9ca"),
                            Calories = 34,
                            IsDeleted = false,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("6ab5f54f-bf9d-4cd6-907d-05cbc682bdeb"),
                            Calories = 165,
                            IsDeleted = false,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("1110d358-6535-4442-8123-cf1417a49006"),
                            Calories = 208,
                            IsDeleted = false,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("574f8aa6-07d8-4d88-9dc3-13205e82d301"),
                            Calories = 155,
                            IsDeleted = false,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("d7ba5a35-b4e6-48b6-8839-ef62a26851e6"),
                            Calories = 579,
                            IsDeleted = false,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("26097e2b-9d02-4adc-9c44-38a033b042c1"),
                            Calories = 123,
                            IsDeleted = false,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("0c4d3abf-c8c9-415f-83f2-d63fd66ef471"),
                            Calories = 389,
                            IsDeleted = false,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("86dd117e-c4e3-4607-bfd3-df940efb713f"),
                            Calories = 61,
                            IsDeleted = false,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("13cda455-39fd-4a7e-9013-c86dec0aa0d6"),
                            Calories = 59,
                            IsDeleted = false,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("f5292628-930f-41cb-bc21-3f4c13a10454"),
                            Calories = 403,
                            IsDeleted = false,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("5519375c-648f-4ff3-ae73-542327173005"),
                            Calories = 23,
                            IsDeleted = false,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("2c3be47f-fd07-403c-b3d6-4f8e932d43c7"),
                            Calories = 18,
                            IsDeleted = false,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("5715eea8-f3f7-4024-9dac-9ea8661cc159"),
                            Calories = 77,
                            IsDeleted = false,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("3ccf0323-254e-4683-88f8-914931caf869"),
                            Calories = 86,
                            IsDeleted = false,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("0b0259e8-4408-4aa5-90a2-401cdc00c362"),
                            Calories = 250,
                            IsDeleted = false,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("366c8781-22a3-407b-958c-499cdf9c35fd"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("4c3ce619-14c8-4513-8942-e663c0f43341"),
                            Calories = 99,
                            IsDeleted = false,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("951705dd-b28f-4259-b9c3-070ceffb5936"),
                            Calories = 76,
                            IsDeleted = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("da14b967-4614-4009-9313-3da4b3a327d4"),
                            Calories = 116,
                            IsDeleted = false,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("9cb3fc0d-93f4-4f83-8410-d9f59fc96357"),
                            Calories = 164,
                            IsDeleted = false,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("f046f100-4532-48ee-bfcf-d15212b9d957"),
                            Calories = 127,
                            IsDeleted = false,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("66fbc619-614a-4100-af87-f1c6ca629a6f"),
                            Calories = 16,
                            IsDeleted = false,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("a17c9c65-1a15-489f-b32f-41cb191a56a7"),
                            Calories = 15,
                            IsDeleted = false,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("3a325340-089a-4f92-a3b3-414ab2910ac5"),
                            Calories = 17,
                            IsDeleted = false,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("2db37d9d-ac74-4b29-8777-2e9e5ed88fd1"),
                            Calories = 22,
                            IsDeleted = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("df07d7f0-d39e-4540-bcf8-22adcd3df536"),
                            Calories = 160,
                            IsDeleted = false,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("4f819ebb-aeab-44a8-8ba9-2890c095f02a"),
                            Calories = 50,
                            IsDeleted = false,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("8c2f3566-5642-41f3-83df-3c861035d5bd"),
                            Calories = 47,
                            IsDeleted = false,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("8c7f023d-5399-4ca0-9756-0d02fd2e5594"),
                            Calories = 57,
                            IsDeleted = false,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("89883e4d-a501-4285-a8b9-adb900b602e6"),
                            Calories = 32,
                            IsDeleted = false,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("c9a8c595-b6d6-4e27-9445-20f1f378d826"),
                            Calories = 30,
                            IsDeleted = false,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("3fd72187-a2f0-43ac-8b63-d785ec4a3e95"),
                            Calories = 588,
                            IsDeleted = false,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("d5f3a649-8aa8-4de5-bf40-2423cd15b3b4"),
                            Calories = 98,
                            IsDeleted = false,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("f5668f47-315f-4cec-9e24-43b91dd0af10"),
                            Calories = 120,
                            IsDeleted = false,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("6b0b5fea-37a3-43da-b8bb-84ffa6163b6a"),
                            Calories = 354,
                            IsDeleted = false,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("e203dc6f-ccff-4066-858d-3b6071779f90"),
                            Calories = 26,
                            IsDeleted = false,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("ce54b10c-605c-4e05-9f32-af6d171fe28f"),
                            Calories = 81,
                            IsDeleted = false,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("ccb54cc7-c929-4084-ad23-ec3056c7c282"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("3917d6fb-ed55-4fe0-9bda-3c5347ba22f3"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("b2bfe132-d446-4b4f-90f3-64c7800f660d"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("8d93c912-20f8-4bf9-b180-471858e5cfe7"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("c054149c-8864-4dab-b998-78ea3025a9ac"),
                            Calories = 230,
                            IsDeleted = false,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("da2b9b75-4e3b-47d8-a67c-a4fe3b344c04"),
                            Calories = 277,
                            IsDeleted = false,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("b997a082-1b43-4087-a032-7d28b0869013"),
                            Calories = 304,
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("b7d7e122-f2ea-49dd-8fcb-96bbcbde99d1"),
                            Calories = 1,
                            IsDeleted = false,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("0c616f08-1893-494c-9062-224226e30f45"),
                            Calories = 598,
                            IsDeleted = false,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if item is Soft Delited");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Times Product is used in Recepie");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
