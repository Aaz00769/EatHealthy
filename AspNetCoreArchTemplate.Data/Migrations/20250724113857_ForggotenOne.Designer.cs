// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetCoreArchTemplate.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250724113857_ForggotenOne")]
    partial class ForggotenOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this Day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this meal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.Property<DateTime?>("TimeEaten")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when the meal was consumed (optional)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("db287458-49fe-4cfc-bf95-30d06b907093"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("973855aa-b0b3-4383-92ff-5b3b933b511d"),
                            Calories = 89,
                            IsDeleted = false,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("6e9b9fa9-ea59-4496-8c4e-5ba3072fff14"),
                            Calories = 41,
                            IsDeleted = false,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("aa6a7719-8d36-46bb-8e47-182443830063"),
                            Calories = 34,
                            IsDeleted = false,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("60e7629f-360f-4567-a6f5-3071155489fb"),
                            Calories = 165,
                            IsDeleted = false,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("d7718f2e-b27c-4b94-9a53-558c6dbe7c0c"),
                            Calories = 208,
                            IsDeleted = false,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("a12565b6-a37c-47bd-be42-625a0cffda5a"),
                            Calories = 155,
                            IsDeleted = false,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("baf890cc-aeac-4fd5-91b2-5a4310c7064d"),
                            Calories = 579,
                            IsDeleted = false,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("8862fcae-baba-47a8-91bf-c48fc2b1c5b9"),
                            Calories = 123,
                            IsDeleted = false,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("e506127a-d38c-4953-9ced-87e3d1fadbbd"),
                            Calories = 389,
                            IsDeleted = false,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("8d2b6c20-1d5c-414e-9962-23cf262f5bce"),
                            Calories = 61,
                            IsDeleted = false,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("f3e89e06-b2cd-45c5-adaa-bad98c6e6011"),
                            Calories = 59,
                            IsDeleted = false,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("3eb6d0e8-a169-4c4b-b906-4707ff32fad8"),
                            Calories = 403,
                            IsDeleted = false,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("34804d5b-eedc-4736-ab5f-7b8998732c2b"),
                            Calories = 23,
                            IsDeleted = false,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("83d719f5-3790-44a6-8225-8cf68bfd61b3"),
                            Calories = 18,
                            IsDeleted = false,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("cb0f9786-dd84-4b43-9a52-d066e7beaf47"),
                            Calories = 77,
                            IsDeleted = false,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("3f296585-cee1-46ee-9ed3-338ac49ee202"),
                            Calories = 86,
                            IsDeleted = false,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("fa831606-ab2f-4ef0-b378-131f9d0be1a2"),
                            Calories = 250,
                            IsDeleted = false,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("3b63a28b-9153-4031-ac5f-fccb6ab7d251"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("62149b99-c90d-4688-9afa-185bc223ec1e"),
                            Calories = 99,
                            IsDeleted = false,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("abd36576-ae05-476d-8f58-af2b75e2cb66"),
                            Calories = 76,
                            IsDeleted = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("214c7ccf-fc16-4e8c-abdf-ecb6d5c39a10"),
                            Calories = 116,
                            IsDeleted = false,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("77acde78-81ce-400c-84c6-aea44747d2fb"),
                            Calories = 164,
                            IsDeleted = false,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("773ba2fd-6686-4a91-b214-314e35462af3"),
                            Calories = 127,
                            IsDeleted = false,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("6d327f44-7fa0-4d75-a841-edf14ad46735"),
                            Calories = 16,
                            IsDeleted = false,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("bf577f52-5ee1-43fc-8e8c-39c13018769f"),
                            Calories = 15,
                            IsDeleted = false,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("a4170f7a-c8b9-4835-b4ab-dc1a70c31bb2"),
                            Calories = 17,
                            IsDeleted = false,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("078d75fc-17be-4876-9ce5-a9f2e990ae28"),
                            Calories = 22,
                            IsDeleted = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("25fe9fab-46e7-40f5-9413-f49596e17e60"),
                            Calories = 160,
                            IsDeleted = false,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("19104cca-f862-48a6-8f75-cec5df5335a6"),
                            Calories = 50,
                            IsDeleted = false,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("a6ddcf4d-1bb0-4931-aca2-3e732bdb90aa"),
                            Calories = 47,
                            IsDeleted = false,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("c811e9ba-52e2-4d9f-bf87-9bc3cd97721f"),
                            Calories = 57,
                            IsDeleted = false,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("0c953355-b8f2-473c-b547-6438b3a7ebc5"),
                            Calories = 32,
                            IsDeleted = false,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("b4fe3623-903b-4f22-8f13-d40692753b56"),
                            Calories = 30,
                            IsDeleted = false,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("3afd5af5-2ac9-41e7-8428-b2533e281ba4"),
                            Calories = 588,
                            IsDeleted = false,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("71211ca8-1175-4e38-819d-d76888a87d4a"),
                            Calories = 98,
                            IsDeleted = false,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("ad698a8e-7503-40f1-9719-02b14c621cc3"),
                            Calories = 120,
                            IsDeleted = false,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("5e405bfb-624e-4957-a857-459414cda4c7"),
                            Calories = 354,
                            IsDeleted = false,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("842cfab3-613b-4829-aa50-c0fd44119a7b"),
                            Calories = 26,
                            IsDeleted = false,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("bbf053fa-ab9c-43e2-b2fb-e43c5d2804f5"),
                            Calories = 81,
                            IsDeleted = false,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("146c19b1-c2b4-412c-a210-dd896ea059dc"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("95cc4d87-31ea-4b9b-93f1-14fed7a0973f"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("3269ce49-e48f-4fd5-a345-cfba948adb39"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("732aa0ab-3903-407a-a502-4efb6eb33d1e"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("5d8830f4-7753-4834-8918-7fce7f3e22b5"),
                            Calories = 230,
                            IsDeleted = false,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("1eaf034f-33c1-4907-aed6-d1b390515df3"),
                            Calories = 277,
                            IsDeleted = false,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("477bfaf4-3118-4aab-a8e0-ba21888c3674"),
                            Calories = 304,
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("904ad446-a069-44de-b9d7-a2c8683f19e2"),
                            Calories = 1,
                            IsDeleted = false,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("4bf61f18-a2fb-4e84-8b38-33c766ef98af"),
                            Calories = 598,
                            IsDeleted = false,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if item is Soft Delited");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Times Product is used in Recepie");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Days")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Meals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany("Products")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
