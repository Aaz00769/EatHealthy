// <auto-generated />
using System;
using EatHealthy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetCoreArchTemplate.Data.Migrations
{
    [DbContext(typeof(EatHealthyDbContext))]
    [Migration("20250724090924_RemovedIsRequireds")]
    partial class RemovedIsRequireds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the day");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this Day");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date this plan is for (e.g., 2025-07-21)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the user has marked this day as completed");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description (e.g., chopped, grilled, peeled)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Days", null, t =>
                        {
                            t.HasComment("Represents a user's day which contains meals");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Day");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Meal");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the DayMeal record");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Order of the meal within the day (e.g., 1 = breakfast, 2 = lunch)");

                    b.HasKey("DayId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DayMeals", null, t =>
                        {
                            t.HasComment("Links a Meal to a Day, allowing reuse across days");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the meal");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this meal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the meal (e.g., Breakfast, Snack, Post-Workout)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note (e.g., mood, hunger level, etc.)");

                    b.Property<DateTime?>("TimeEaten")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when the meal was consumed (optional)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Meals", null, t =>
                        {
                            t.HasComment("A specific meal in a day (e.g., breakfast, lunch, dinner)");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Meal");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related Recipe");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the junction record");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealRecipes", null, t =>
                        {
                            t.HasComment("Links a Recipe to a Meal");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product ID");

                    b.Property<int>("Calories")
                        .HasColumnType("int")
                        .HasComment("Calories per 100g");

                    b.Property<int?>("Carbohydrates")
                        .HasColumnType("int")
                        .HasComment("Carbohydrates per 100g (g)");

                    b.Property<int?>("Fats")
                        .HasColumnType("int")
                        .HasComment("Fats per 100g (g)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if itme is Soft Delited");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Product name");

                    b.Property<int?>("Proteins")
                        .HasColumnType("int")
                        .HasComment("Proteins per 100g (g)");

                    b.Property<int?>("ServingSizeGrams")
                        .HasColumnType("int")
                        .HasComment("Standard serving size in grams");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e495032d-3755-40d0-8eae-53f301748bb6"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("005466ab-5a00-4216-b2b5-6277c5ec198f"),
                            Calories = 89,
                            IsDeleted = false,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = new Guid("a30445e7-43f5-4111-89eb-7961077c4c51"),
                            Calories = 41,
                            IsDeleted = false,
                            Name = "Carrot"
                        },
                        new
                        {
                            Id = new Guid("707b1ac2-e27f-4b0a-bd8f-7ca01360ea4c"),
                            Calories = 34,
                            IsDeleted = false,
                            Name = "Broccoli"
                        },
                        new
                        {
                            Id = new Guid("cff8be41-4f4c-4d2a-a1da-712abd3bad0e"),
                            Calories = 165,
                            IsDeleted = false,
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("30837e98-4845-4bb5-abe7-7f8d9282c3b5"),
                            Calories = 208,
                            IsDeleted = false,
                            Name = "Salmon"
                        },
                        new
                        {
                            Id = new Guid("23ccf715-bc30-4de6-9dc0-cb1217a34072"),
                            Calories = 155,
                            IsDeleted = false,
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("73ce2d1e-3a5a-4a67-8540-69d02e0193bc"),
                            Calories = 579,
                            IsDeleted = false,
                            Name = "Almonds"
                        },
                        new
                        {
                            Id = new Guid("0e86ce57-7f0f-44f9-929a-a7e27936252c"),
                            Calories = 123,
                            IsDeleted = false,
                            Name = "Brown Rice"
                        },
                        new
                        {
                            Id = new Guid("5c0d5b54-52e0-49b1-bc99-f6b4954c7d99"),
                            Calories = 389,
                            IsDeleted = false,
                            Name = "Oats"
                        },
                        new
                        {
                            Id = new Guid("6a286461-b95b-4f4b-988f-7cb2a7132e5c"),
                            Calories = 61,
                            IsDeleted = false,
                            Name = "Milk (Whole)"
                        },
                        new
                        {
                            Id = new Guid("0e03f667-10fe-43b7-97f3-30e7948620d4"),
                            Calories = 59,
                            IsDeleted = false,
                            Name = "Greek Yogurt"
                        },
                        new
                        {
                            Id = new Guid("c6a1a06b-3b45-4320-8828-8e03a685b089"),
                            Calories = 403,
                            IsDeleted = false,
                            Name = "Cheddar Cheese"
                        },
                        new
                        {
                            Id = new Guid("99e79ffd-6bf1-40ec-997a-98d79075f112"),
                            Calories = 23,
                            IsDeleted = false,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = new Guid("2ae24d90-0eda-48ce-952b-25f2fc7059ce"),
                            Calories = 18,
                            IsDeleted = false,
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = new Guid("da28670b-905d-4475-a937-e3a7ffc44c83"),
                            Calories = 77,
                            IsDeleted = false,
                            Name = "Potato"
                        },
                        new
                        {
                            Id = new Guid("b405c4f5-98d8-4e10-906d-063eda4d98da"),
                            Calories = 86,
                            IsDeleted = false,
                            Name = "Sweet Potato"
                        },
                        new
                        {
                            Id = new Guid("aa90d9d6-8718-4e6e-a334-52ab3009bf65"),
                            Calories = 250,
                            IsDeleted = false,
                            Name = "Beef (Lean)"
                        },
                        new
                        {
                            Id = new Guid("6e330053-2d5b-4560-885b-970add1abb3b"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Tuna (Canned in Water)"
                        },
                        new
                        {
                            Id = new Guid("c54bc0d5-6289-4c24-a084-a5099ad811ef"),
                            Calories = 99,
                            IsDeleted = false,
                            Name = "Shrimp"
                        },
                        new
                        {
                            Id = new Guid("d36155ae-63a4-4357-8198-14e723927920"),
                            Calories = 76,
                            IsDeleted = false,
                            Name = "Tofu"
                        },
                        new
                        {
                            Id = new Guid("87a32db3-5a2b-49d4-b0a1-7e53e519f774"),
                            Calories = 116,
                            IsDeleted = false,
                            Name = "Lentils"
                        },
                        new
                        {
                            Id = new Guid("95b3654b-7420-42c2-a239-b0eb9acc05d9"),
                            Calories = 164,
                            IsDeleted = false,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            Id = new Guid("bbcf2de2-6e19-4139-b641-fb70cbc8c78a"),
                            Calories = 127,
                            IsDeleted = false,
                            Name = "Kidney Beans"
                        },
                        new
                        {
                            Id = new Guid("80a71383-c9bc-4cbb-aa15-5901728cb3bd"),
                            Calories = 16,
                            IsDeleted = false,
                            Name = "Cucumber"
                        },
                        new
                        {
                            Id = new Guid("a6cb74b4-86de-4558-9bb8-e863dc0fd500"),
                            Calories = 15,
                            IsDeleted = false,
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = new Guid("060ac89d-fc68-4e7f-a2cb-1bfca3596cfe"),
                            Calories = 17,
                            IsDeleted = false,
                            Name = "Zucchini"
                        },
                        new
                        {
                            Id = new Guid("9996152a-7928-4456-9abb-aba695790e13"),
                            Calories = 22,
                            IsDeleted = false,
                            Name = "Mushrooms"
                        },
                        new
                        {
                            Id = new Guid("4686c0b0-f507-468f-85ee-70c3261ec17c"),
                            Calories = 160,
                            IsDeleted = false,
                            Name = "Avocado"
                        },
                        new
                        {
                            Id = new Guid("1b2e382e-384d-49ea-88bb-6df857361d97"),
                            Calories = 50,
                            IsDeleted = false,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = new Guid("879c7cb7-fcef-4f1e-a01d-a635c7d30af0"),
                            Calories = 47,
                            IsDeleted = false,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = new Guid("f14d656f-5273-4391-9fdb-257318fda0a3"),
                            Calories = 57,
                            IsDeleted = false,
                            Name = "Blueberries"
                        },
                        new
                        {
                            Id = new Guid("cb2b77d2-7229-4364-98f3-7fcedc0e8858"),
                            Calories = 32,
                            IsDeleted = false,
                            Name = "Strawberries"
                        },
                        new
                        {
                            Id = new Guid("c3e2a3ae-e2b5-4acc-8b77-f4e96593960e"),
                            Calories = 30,
                            IsDeleted = false,
                            Name = "Watermelon"
                        },
                        new
                        {
                            Id = new Guid("9ddf728d-cc8e-4d41-b206-21e2f7f13457"),
                            Calories = 588,
                            IsDeleted = false,
                            Name = "Peanut Butter"
                        },
                        new
                        {
                            Id = new Guid("e34ae233-1dcd-496a-8d0a-4a6e5a1aed7c"),
                            Calories = 98,
                            IsDeleted = false,
                            Name = "Cottage Cheese"
                        },
                        new
                        {
                            Id = new Guid("e05dfd46-d29a-417d-83b6-5e4a9e3982cf"),
                            Calories = 120,
                            IsDeleted = false,
                            Name = "Quinoa"
                        },
                        new
                        {
                            Id = new Guid("f99afa79-fe6a-4d30-9123-ad164b0a7805"),
                            Calories = 354,
                            IsDeleted = false,
                            Name = "Barley"
                        },
                        new
                        {
                            Id = new Guid("7eb405c2-65ac-4e64-aab1-7fa512abae49"),
                            Calories = 26,
                            IsDeleted = false,
                            Name = "Pumpkin"
                        },
                        new
                        {
                            Id = new Guid("14dd23d7-ab14-4728-8fb4-46c19d42e3e8"),
                            Calories = 81,
                            IsDeleted = false,
                            Name = "Green Peas"
                        },
                        new
                        {
                            Id = new Guid("504cb754-f4c2-469d-a8f6-8a7fd0bffa88"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Cauliflower"
                        },
                        new
                        {
                            Id = new Guid("78d90e90-c84c-4b3b-bf57-8f8b0f8f00ef"),
                            Calories = 25,
                            IsDeleted = false,
                            Name = "Eggplant"
                        },
                        new
                        {
                            Id = new Guid("72db180a-5fbb-4811-8729-ad3f74a3b776"),
                            Calories = 52,
                            IsDeleted = false,
                            Name = "Raspberries"
                        },
                        new
                        {
                            Id = new Guid("476e4bbc-673b-42a4-b2ff-b901afc62270"),
                            Calories = 132,
                            IsDeleted = false,
                            Name = "Black Beans"
                        },
                        new
                        {
                            Id = new Guid("d6a3a76f-a60d-4711-b7d3-096bc8b386fc"),
                            Calories = 230,
                            IsDeleted = false,
                            Name = "Coconut Milk"
                        },
                        new
                        {
                            Id = new Guid("591a7d3b-881a-419d-b3b8-a76c8e7e4deb"),
                            Calories = 277,
                            IsDeleted = false,
                            Name = "Dates"
                        },
                        new
                        {
                            Id = new Guid("a2b546d9-2ef0-4cef-bc61-f7de1717e86d"),
                            Calories = 304,
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("7e254622-037b-4a38-894f-ace81a853f26"),
                            Calories = 1,
                            IsDeleted = false,
                            Name = "Green Tea"
                        },
                        new
                        {
                            Id = new Guid("9428ebb3-16da-4edf-991f-067a81212984"),
                            Calories = 598,
                            IsDeleted = false,
                            Name = "Dark Chocolate (85%)"
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the recipe");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created this recipe");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was created (UTC)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional description or instructions for the recipe");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Whether an administrator has approved the recipe for public visibility");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Used to check if item is Soft Delited");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasComment("Whether the user has marked this recipe as public");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the recipe was last modified (nullable)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of the recipe (e.g., Chicken Stir Fry)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipes", null, t =>
                        {
                            t.HasComment("User-created recipe");
                        });
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the relation");

                    b.Property<int>("Grams")
                        .HasColumnType("int")
                        .HasComment("Amount of the product in grams");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional note about the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Times Product is used in Recepie");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the related recipe");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeProducts", null, t =>
                        {
                            t.HasComment("Links a Product to a Recipe with a specific amount");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Days")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.DayMeal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Day", "Day")
                        .WithMany("DayMeals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("DayMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Meals")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.MealRecipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany("Products")
                        .HasForeignKey("AppUserId");

                    b.HasOne("EatHealthy.Data.Models.AppUser", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.RecipeProduct", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EatHealthy.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EatHealthy.Data.Models.AppUser", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Day", b =>
                {
                    b.Navigation("DayMeals");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Meal", b =>
                {
                    b.Navigation("DayMeals");

                    b.Navigation("MealRecipes");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("EatHealthy.Data.Models.Recipe", b =>
                {
                    b.Navigation("MealRecipes");

                    b.Navigation("RecipeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
