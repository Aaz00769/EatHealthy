@model EatHealthy.Web.ViewModels.Recipe.RecipeFormInputModel
@using EatHealthy.Web.ViewModels.Product
@{
    ViewData["Title"] = "Edit Recipe";
    var products = (IEnumerable<ProductViewModel>)ViewBag.AvailableProducts;


}

<h2>Edit Recipe</h2>

<form asp-action="EditRecipe" method="post">
    <input type="hidden" asp-for="RecipeId" />
    <input type="hidden" name="rowVersion" value="@ViewBag.ConcurrencyToken" />
    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
    </div>

    <div class="form-group">
        <label asp-for="ImageUrl"></label>
        <input asp-for="ImageUrl" class="form-control" />
    </div>

    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
    </div>

     <h4>Products</h4>
    <div id="products-list">
        @for (int i = 0; i < Model.SelectedProducts.Count; i++)
        {
            // Add null check here
            var productInput = Model.SelectedProducts[i];
            if (productInput == null)
            {
                continue; // Skip null entries
            }
            
            <div class="product-row mb-2">
                <select name="SelectedProducts[@i].ProductId" class="form-control d-inline-block w-auto" required>
                    <option value="">-- Select Product --</option>
                    @if (products == null) {
                        continue;
                    }
                    else
                    {
                        @foreach (var product in products)
                        {
                        // Skip null products
                        if (product == null) continue;
                        
                        <option value="@product.Id" 
                                selected="@(product.Id == productInput.ProductId)">
                            @product.Name (@product.Calories kcal)
                        </option>
                       }
                    }
                    
                </select>
                <input type="number" name="SelectedProducts[@i].Quantity" 
                       value="@productInput.Quantity" 
                       class="form-control d-inline-block w-auto" min="1" required />
                <button type="button" class="btn btn-danger btn-sm remove-product">Remove</button>
            </div>
        }
    </div>

    <button type="button" class="btn btn-outline-primary btn-sm" id="add-product">Add Product</button>
    <br /><br />
    <button type="submit" class="btn btn-success">Save</button>
</form>

@section Scripts {
    <script>
        // Initialize with the current count
        let nextIndex = @Model.SelectedProducts.Count;
        
        // Serialize products to JSON
        const products = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            products?.Where(p => p != null).Select(p => new {
                id = p.Id,
                name = p.Name,
                calories = p.Calories
            }) ?? []
        ));

        document.getElementById("add-product").addEventListener("click", () => {
            const container = document.createElement("div");
            container.className = "product-row mb-2";
            
            // Build options HTML
            let optionsHtml = '<option value="">-- Select Product --</option>';
            products.forEach(p => {
                optionsHtml += `<option value="${p.id}">${p.name} (${p.calories} kcal)</option>`;
            });
            
            container.innerHTML = `
                <select name="SelectedProducts[${nextIndex}].ProductId" class="form-control d-inline-block w-auto" required>
                    ${optionsHtml}
                </select>
                <input type="number" name="SelectedProducts[${nextIndex}].Quantity" value="1" class="form-control d-inline-block w-auto" min="1" required />
                <button type="button" class="btn btn-danger btn-sm remove-product">Remove</button>
            `;
            
            document.getElementById("products-list").appendChild(container);
            
            // Attach remove handler to the new row
            container.querySelector('.remove-product').addEventListener('click', function() {
                container.remove();
                reindexProducts();
            });
            
            nextIndex++;
        });

        // Function to re-index all product rows
        function reindexProducts() {
            const rows = document.querySelectorAll('.product-row');
            rows.forEach((row, index) => {
                // Update select name
                const select = row.querySelector('select');
                select.name = `SelectedProducts[${index}].ProductId`;
                
                // Update quantity input name
                const input = row.querySelector('input[type="number"]');
                input.name = `SelectedProducts[${index}].Quantity`;
            });
            nextIndex = rows.length;
        }

        // Attach remove handlers to existing rows
        document.querySelectorAll('.product-row').forEach(row => {
            row.querySelector('.remove-product').addEventListener('click', function() {
                row.remove();
                reindexProducts();
            });
        });
    </script>
}
